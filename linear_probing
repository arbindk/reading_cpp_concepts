1. Linear Probing in Hashing 
Easy Accuracy: 46.12% Submissions: 21025 Points: 2
Linear probing is a collision handling technique in hashing. Linear probing says that whenever a collision occurs, search for the immediate next position.

Given an array of integers and a hash table size. Fill the array elements into a hash table using Linear Probing to handle collisions. Duplicate elements must be mapped to the same position in the hash table while colliding elements must be mapped to the [(value+1)%hashSise] position.

Example 1:

Input:
hashSize = 10
sizeOfArray = 4 
Array[] = {4,14,24,44}
Output:
-1 -1 -1 -1 4 14 24 44 -1 -1
Explanation: 4%10=4. So put 4 in 
hashtable[4].Now, 14%10=4, but 
hashtable[4] is alreadyfilled so put 
14 in the next slot and so on.


#include <iostream>
#include <vector>
using namespace std;

vector<int> linearProbing(int hashSize, int arr[], int sizeOfArray)
{
    vector<int> hashtable(hashSize,-1);
    
    for(int i=0;i<sizeOfArray;i++){
        int pos=arr[i]%hashSize;
        if(hashtable[pos] != -1){
            int count=0;
            while(hashtable[pos]!=-1 and count<=hashSize){
                if(hashtable[pos]==arr[i])
                    break;
                pos=(pos+1)%hashSize;
                count++;
            }
            if(hashtable[pos]==-1)
            hashtable[pos]=arr[i];
        }
        else{
            hashtable[pos]=arr[i];
        }
    }
       return hashtable;


}


int main()
{
    int arr[] = {9, 99, 999, 9999};
    vector<int> v;
    v = linearProbing(10, arr, 4);
    for(auto a : v)
    cout<<a<<" ";

    return 0;
}
