SYNTAX : < return-type > (* < function-name >)(< argument-list >);

NOTE: The return-type and argument signature of the function must exactly match the function pointer declaration. e.g. Following are some valid and invalid assignments:


int fun1();
double fun2();
int fun3(int);

int (*fun_ptr)() = fun1; //valid
fun_ptr = fun2;  //invalid (return-type mismatch)
fun_ptr = fun3;  //invalid (argument list mismatch)

======================================================================================

#include <bits/stdc++.h>
using namespace std;

int add(int x, int y) { return x + y; }
string add(string x, string y) { return x + y; }

int main()
{
    //Assign integer add() function to funtion pointer
    int (*fun_ptr_int)(int, int) = add;
    
    //Assign string add() function to function pointer
    string (*fun_ptr_str)(string, string) = add;
    
    //Calling using function pointer
    cout << fun_ptr_int(5, 6) << endl;
    
    cout << fun_ptr_str("Hello ", "World") << endl;
    
    return 0;
}

#EG: Sorting numbers with function pointers

#include <bits/stdc++.h>
using namespace std;

//3rd argument is a function pointer
void sort(int a[], int n, bool (*compare)(int, int))
{
    int i,j;
    for (i=0; i<n-1; i++)
        for (j=0; j<n-i-1; j++)
            if (!compare(a[j], a[j+1]))
                swap(a[j], a[j+1]);
}

bool asc(int x, int y) { return x < y; }
bool desc(int x, int y) { return x > y; }

int main()
{
    int a[] = {0, 2, 5, 6, 9, 1, 3, 4, 8, 7};
    
    //pass ascending function
    sort(a, 10, asc);
    
    for (int i=0; i<10; i++)
        cout << a[i] << " ";
    cout << endl;
    
    //pass descending function
    sort(a, 10, desc);
    
    for (int i=0; i<10; i++)
        cout << a[i] << " ";
    cout << endl;
}
